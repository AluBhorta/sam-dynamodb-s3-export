AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Stack used to demonstrate how to export dynamodb table data to s3 on a schedule

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  GitHubOrg:
    Type: String
    Default: AluBhorta
    Description: "Name of the Github user/org."
  GitHubRepoName:
    Type: String
    Default: sam-dynamodb-s3-export
    Description: "Name of the Github repo."

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  S3Bucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete

  Func1ScheduledDataGenerator:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Inserts mock data to dynamodb table at scheduled intervals"
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      CodeUri: lambdas/func1-data-generator
      Handler: app.handler
      MemorySize: 128
      Timeout: 120
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoDBTable
      Events:
        CloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 * * * ? *)
      Policies:
        - AmazonDynamoDBFullAccess

  Func2ScheduledTableExporter:
    Type: AWS::Serverless::Function
    Properties:
      Description: "Exports data from dyanmodb table to s3 bucket at scheduled intervals"
      Runtime: nodejs18.x
      CodeUri: lambdas/func2-data-exporter
      Handler: app.handler
      MemorySize: 128
      Timeout: 120
      Environment:
        Variables:
          S3_BUCKET: !Ref S3Bucket
          DYNAMODB_TABLE: !Ref DynamoDBTable
      Events:
        CloudWatchEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 2 * * ? *)
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess

  IAMRoleForPipeline:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: !Ref GithubOidc
            Condition:
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${GitHubOrg}/${GitHubRepoName}:*
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  GithubOidc:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 6938fd4d98bab03faadb97b34396831e3780aea1

Outputs:
  ExportedDataS3Bucket:
    Value: !Ref S3Bucket
    Description: "The S3 bucket used to store exported data from DynamoDB."
  IAMRoleForPipeline:
    Value: !GetAtt [IAMRoleForPipeline, Arn]
    Description: "The ARN of the IAM Role that will be used by Github Actions for CI/CD. Copy it, and add it as a secret named 'PIPELINE_IAM_ROLE' to your Github repo."
